package main

import (
    "fmt"
    "log"
    "net/http"
    "sync"
    "github.com/gorilla/websocket" 
)

// WebSocket baÄŸlantÄ±sÄ±nÄ± HTTP Ã¼zerinden yÃ¼kseltmek iÃ§in kullanÄ±lÄ±r
var upgrader = websocket.Upgrader{
    CheckOrigin: func(r *http.Request) bool {
        return true
    },
}

// BaÄŸlantÄ±: kullanÄ±cÄ± eÅŸlemesi iÃ§in bir harita (her istemcinin kullanÄ±cÄ± adÄ±nÄ± saklarÄ±z)
var clients = make(map[*websocket.Conn]string)

// EriÅŸimleri gÃ¼venli hale getirmek iÃ§in mutex
var clientsMutex = sync.Mutex{}

// MesajlarÄ± gÃ¶ndermek iÃ§in kanal
var broadcast = make(chan string) // ArtÄ±k []byte deÄŸil, doÄŸrudan string mesaj gÃ¶nderiyoruz

func main() {
    http.HandleFunc("/ws", handleConnections)
    http.Handle("/", http.FileServer(http.Dir("./")))

    // MesajlarÄ± daÄŸÄ±tan fonksiyonu baÅŸlat
    go handleMessages()

    fmt.Println("WebSocket sunucusu http://localhost:8080/ws adresinde Ã§alÄ±ÅŸÄ±yor...")
    log.Fatal(http.ListenAndServe(":8080", nil))
}

// Bu fonksiyon her yeni baÄŸlantÄ± iÃ§in Ã§alÄ±ÅŸÄ±r
func handleConnections(w http.ResponseWriter, r *http.Request) {
    ws, err := upgrader.Upgrade(w, r, nil)
    if err != nil {
        log.Println("YÃ¼kseltme hatasÄ±:", err)
        return
    }
    defer ws.Close()

    var username string

    // Ä°lk gelen mesajÄ± kullanÄ±cÄ± adÄ± olarak al
    _, firstMsg, err := ws.ReadMessage()
    if err != nil {
        log.Println("Ä°lk mesaj (kullanÄ±cÄ± adÄ±) okunamadÄ±:", err)
        return
    }
    username = string(firstMsg)

    // KullanÄ±cÄ±yÄ± clients mapâ€™ine ekle
    clientsMutex.Lock()
    clients[ws] = username
    clientsMutex.Unlock()

    // Herkese bu kiÅŸinin katÄ±ldÄ±ÄŸÄ±nÄ± duyur
    joinMsg := fmt.Sprintf("ğŸ”µ %s katÄ±ldÄ±", username)
    broadcast <- joinMsg

    for {
        // Yeni mesajlarÄ± oku
        _, msg, err := ws.ReadMessage()
        if err != nil {
            // EÄŸer baÄŸlantÄ± koparsa ayrÄ±lma mesajÄ± gÃ¶nder
            log.Printf("%s baÄŸlantÄ± koptu: %v\n", username, err)

            clientsMutex.Lock()
            delete(clients, ws)
            clientsMutex.Unlock()

            leaveMsg := fmt.Sprintf("ğŸ”´ %s ayrÄ±ldÄ±", username)
            broadcast <- leaveMsg
            break
        }

        // KullanÄ±cÄ±nÄ±n mesajÄ±nÄ± al ve ismiyle birlikte yay
        fullMsg := fmt.Sprintf("%s: %s", username, msg)
        broadcast <- fullMsg
    }
}

// Gelen her mesajÄ± tÃ¼m istemcilere gÃ¶nderir
func handleMessages() {
    for {
        msg := <-broadcast

        clientsMutex.Lock()
        for client := range clients {
            err := client.WriteMessage(websocket.TextMessage, []byte(msg))
            if err != nil {
                log.Println("Mesaj gÃ¶nderilemedi:", err)
                client.Close()
                delete(clients, client)
            }
        }
        clientsMutex.Unlock()
    }
}